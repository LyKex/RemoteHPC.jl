using Test
using RemoteHPC

@testset "script io" begin
    exec = RemoteHPC.Exec("test", "test.x", "test/bin", Dict("f" => 3, "test" => [1, 2, 3], "test2" => "stringtest", "-nk" => 10), ["intel", "intel-mkl"], true)

    e = RemoteHPC.SlurmEnvironment("test", Dict("N" => 3, "partition" => "default", "time" => "00:01:01"), Dict("OMP_NUM_THREADS" => 1), "", "", RemoteHPC.Exec(name = "srun", exec="srun"))

    c = [RemoteHPC.Calculation(exec, "scf.in", "scf.out", true), RemoteHPC.Calculation(exec, "nscf.in", "nscf.out", true)]

    tc = 
    """#!/bin/bash
    # Generated by RemoteHPC
    # Environment: name=test type=RemoteHPC.SlurmEnvironment
    #SBATCH --time=00:01:01 
    #SBATCH -N 3 
    #SBATCH --partition=default 

    export OMP_NUM_THREADS=1
    module load intel intel-mkl
    srun test/bin/test.x --test2=stringtest --test=1 2 3 -nk 10 -f 3 < scf.in > scf.out #exec: names=[srun test] modules=[intel intel-mkl]
    srun test/bin/test.x --test2=stringtest --test=1 2 3 -nk 10 -f 3 < nscf.in > nscf.out #exec: names=[srun test] modules=[intel intel-mkl]
    
    """
    
    env, calcs = RemoteHPC.parse_script(tc)
    @test env == e
    @test calcs[1] == c[1]
    @test calcs[2] == c[2]
    tc = RemoteHPC.script(e, c)
    env, calcs = RemoteHPC.parse_script(tc)
    @test calcs[1] == c[1]
    @test calcs[2] == c[2]
end

@testset "execs" begin
    e = RemoteHPC.Exec(name="test", exec="ls")
    @test RemoteHPC.isrunnable(e)
end
